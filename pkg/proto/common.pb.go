// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.3
// source: pkg/proto/_common.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Information about high-profile, military or government aircraft like
// Air Force One are not displayed. Other restricted aircraft may be anonymised,
// appearing as `BLOCKED` or `NA`.
// See [FAA's Limited Data Displayed](https://www.faa.gov/pilots/ladd) and
// [PIA program](https://www.faa.gov/air_traffic/technology/equipadsb/privacy)
// for more details.
type RestrictionVisibility int32

const (
	RestrictionVisibility_NOT_VISIBLE       RestrictionVisibility = 0
	RestrictionVisibility_PARTIALLY_VISIBLE RestrictionVisibility = 1
	RestrictionVisibility_FULLY_VISIBLE     RestrictionVisibility = 2
)

// Enum value maps for RestrictionVisibility.
var (
	RestrictionVisibility_name = map[int32]string{
		0: "NOT_VISIBLE",
		1: "PARTIALLY_VISIBLE",
		2: "FULLY_VISIBLE",
	}
	RestrictionVisibility_value = map[string]int32{
		"NOT_VISIBLE":       0,
		"PARTIALLY_VISIBLE": 1,
		"FULLY_VISIBLE":     2,
	}
)

func (x RestrictionVisibility) Enum() *RestrictionVisibility {
	p := new(RestrictionVisibility)
	*p = x
	return p
}

func (x RestrictionVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestrictionVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[0].Descriptor()
}

func (RestrictionVisibility) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[0]
}

func (x RestrictionVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestrictionVisibility.Descriptor instead.
func (RestrictionVisibility) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{0}
}

type Service int32

const (
	Service_PASSENGER               Service = 0
	Service_CARGO                   Service = 1
	Service_MILITARY_AND_GOVERNMENT Service = 2
	Service_BUSINESS_JETS           Service = 3
	Service_GENERAL_AVIATION        Service = 4
	Service_HELICOPTERS             Service = 5
	Service_LIGHTER_THAN_AIR        Service = 6
	Service_GLIDERS                 Service = 7
	Service_DRONES                  Service = 8
	Service_GROUND_VEHICLES         Service = 9
	Service_OTHER_SERVICE           Service = 10
	Service_NON_CATEGORIZED         Service = 11
)

// Enum value maps for Service.
var (
	Service_name = map[int32]string{
		0:  "PASSENGER",
		1:  "CARGO",
		2:  "MILITARY_AND_GOVERNMENT",
		3:  "BUSINESS_JETS",
		4:  "GENERAL_AVIATION",
		5:  "HELICOPTERS",
		6:  "LIGHTER_THAN_AIR",
		7:  "GLIDERS",
		8:  "DRONES",
		9:  "GROUND_VEHICLES",
		10: "OTHER_SERVICE",
		11: "NON_CATEGORIZED",
	}
	Service_value = map[string]int32{
		"PASSENGER":               0,
		"CARGO":                   1,
		"MILITARY_AND_GOVERNMENT": 2,
		"BUSINESS_JETS":           3,
		"GENERAL_AVIATION":        4,
		"HELICOPTERS":             5,
		"LIGHTER_THAN_AIR":        6,
		"GLIDERS":                 7,
		"DRONES":                  8,
		"GROUND_VEHICLES":         9,
		"OTHER_SERVICE":           10,
		"NON_CATEGORIZED":         11,
	}
)

func (x Service) Enum() *Service {
	p := new(Service)
	*p = x
	return p
}

func (x Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[1].Descriptor()
}

func (Service) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[1]
}

func (x Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service.Descriptor instead.
func (Service) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{1}
}

type TrafficType int32

const (
	TrafficType_NONE          TrafficType = 0
	TrafficType_GROUND_ONLY   TrafficType = 1
	TrafficType_AIRBORNE_ONLY TrafficType = 2
	TrafficType_ALL           TrafficType = 3
)

// Enum value maps for TrafficType.
var (
	TrafficType_name = map[int32]string{
		0: "NONE",
		1: "GROUND_ONLY",
		2: "AIRBORNE_ONLY",
		3: "ALL",
	}
	TrafficType_value = map[string]int32{
		"NONE":          0,
		"GROUND_ONLY":   1,
		"AIRBORNE_ONLY": 2,
		"ALL":           3,
	}
)

func (x TrafficType) Enum() *TrafficType {
	p := new(TrafficType)
	*p = x
	return p
}

func (x TrafficType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficType) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[2].Descriptor()
}

func (TrafficType) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[2]
}

func (x TrafficType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficType.Descriptor instead.
func (TrafficType) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{2}
}

type DataSource int32

const (
	DataSource_ADSB              DataSource = 0
	DataSource_MLAT              DataSource = 1
	DataSource_FLARM             DataSource = 2
	DataSource_FAA               DataSource = 3
	DataSource_ESTIMATED         DataSource = 4
	DataSource_SATELLITE         DataSource = 5
	DataSource_OTHER_DATA_SOURCE DataSource = 6
	DataSource_UAT               DataSource = 7
	DataSource_SPIDERTRACKS      DataSource = 8
	DataSource_AUS               DataSource = 9
)

// Enum value maps for DataSource.
var (
	DataSource_name = map[int32]string{
		0: "ADSB",
		1: "MLAT",
		2: "FLARM",
		3: "FAA",
		4: "ESTIMATED",
		5: "SATELLITE",
		6: "OTHER_DATA_SOURCE",
		7: "UAT",
		8: "SPIDERTRACKS",
		9: "AUS",
	}
	DataSource_value = map[string]int32{
		"ADSB":              0,
		"MLAT":              1,
		"FLARM":             2,
		"FAA":               3,
		"ESTIMATED":         4,
		"SATELLITE":         5,
		"OTHER_DATA_SOURCE": 6,
		"UAT":               7,
		"SPIDERTRACKS":      8,
		"AUS":               9,
	}
)

func (x DataSource) Enum() *DataSource {
	p := new(DataSource)
	*p = x
	return p
}

func (x DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[3].Descriptor()
}

func (DataSource) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[3]
}

func (x DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource.Descriptor instead.
func (DataSource) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{3}
}

type Icon int32

const (
	Icon_B738      Icon = 0  // Boeing 737-800
	Icon_FGTR      Icon = 1  // Fighter jet
	Icon_ASW20     Icon = 2  // Glider ASW 20
	Icon_C206      Icon = 3  // Cessna 206
	Icon_C303      Icon = 4  // Cessna 303
	Icon_LJ60      Icon = 5  // Learjet 60
	Icon_Q300      Icon = 6  // Bombardier Dash 8 Q300
	Icon_B736      Icon = 7  // Boeing 737-600
	Icon_FOKKER100 Icon = 8  // Fokker 100
	Icon_RJ85      Icon = 9  // Avro RJ85
	Icon_A320      Icon = 10 // Airbus A320
	Icon_B757      Icon = 11 // Boeing 757
	Icon_B767      Icon = 12 // Boeing 767
	Icon_A3ST      Icon = 13 // Airbus A300-600ST Beluga
	Icon_MD11      Icon = 14 // McDonnell Douglas MD-11
	Icon_A330      Icon = 15 // Airbus A330
	Icon_A343      Icon = 16 // Airbus A340-300
	Icon_A346      Icon = 17 // Airbus A340-600
	Icon_B777      Icon = 18 // Boeing 777
	Icon_B747      Icon = 19 // Boeing 747
	Icon_A380      Icon = 20 // Airbus A380
	Icon_A225      Icon = 21 // Antonov An-225
	Icon_SI2       Icon = 22 // Solar Impulse 2
	Icon_EC        Icon = 23 // Eurocopter
	Icon_BALL      Icon = 24 // Balloon
	Icon_GRND      Icon = 25 // Ground vehicle
	Icon_SLEI      Icon = 26 // Santa Sleigh
	Icon_DRON      Icon = 27 // Drone
	Icon_SAT       Icon = 28 // Satellite
	Icon_ISS       Icon = 29 // International Space Station
	Icon_CONC      Icon = 30 // Concorde
)

// Enum value maps for Icon.
var (
	Icon_name = map[int32]string{
		0:  "B738",
		1:  "FGTR",
		2:  "ASW20",
		3:  "C206",
		4:  "C303",
		5:  "LJ60",
		6:  "Q300",
		7:  "B736",
		8:  "FOKKER100",
		9:  "RJ85",
		10: "A320",
		11: "B757",
		12: "B767",
		13: "A3ST",
		14: "MD11",
		15: "A330",
		16: "A343",
		17: "A346",
		18: "B777",
		19: "B747",
		20: "A380",
		21: "A225",
		22: "SI2",
		23: "EC",
		24: "BALL",
		25: "GRND",
		26: "SLEI",
		27: "DRON",
		28: "SAT",
		29: "ISS",
		30: "CONC",
	}
	Icon_value = map[string]int32{
		"B738":      0,
		"FGTR":      1,
		"ASW20":     2,
		"C206":      3,
		"C303":      4,
		"LJ60":      5,
		"Q300":      6,
		"B736":      7,
		"FOKKER100": 8,
		"RJ85":      9,
		"A320":      10,
		"B757":      11,
		"B767":      12,
		"A3ST":      13,
		"MD11":      14,
		"A330":      15,
		"A343":      16,
		"A346":      17,
		"B777":      18,
		"B747":      19,
		"A380":      20,
		"A225":      21,
		"SI2":       22,
		"EC":        23,
		"BALL":      24,
		"GRND":      25,
		"SLEI":      26,
		"DRON":      27,
		"SAT":       28,
		"ISS":       29,
		"CONC":      30,
	}
)

func (x Icon) Enum() *Icon {
	p := new(Icon)
	*p = x
	return p
}

func (x Icon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Icon) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[4].Descriptor()
}

func (Icon) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[4]
}

func (x Icon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Icon.Descriptor instead.
func (Icon) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{4}
}

type Status int32

const (
	Status_NORMAL        Status = 0
	Status_BACKGROUND    Status = 1
	Status_EMERGENCY     Status = 2
	Status_NOT_AVAILABLE Status = 3
	Status_LIVE          Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "NORMAL",
		1: "BACKGROUND",
		2: "EMERGENCY",
		3: "NOT_AVAILABLE",
		4: "LIVE",
	}
	Status_value = map[string]int32{
		"NORMAL":        0,
		"BACKGROUND":    1,
		"EMERGENCY":     2,
		"NOT_AVAILABLE": 3,
		"LIVE":          4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[5].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[5]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{5}
}

type FlightStage int32

const (
	FlightStage_UNKNOWN    FlightStage = 0
	FlightStage_ON_GROUND  FlightStage = 1
	FlightStage_ASCENDING  FlightStage = 2
	FlightStage_AIRBORNE   FlightStage = 3
	FlightStage_DESCENDING FlightStage = 4
	FlightStage_DIVERSION  FlightStage = 5
)

// Enum value maps for FlightStage.
var (
	FlightStage_name = map[int32]string{
		0: "UNKNOWN",
		1: "ON_GROUND",
		2: "ASCENDING",
		3: "AIRBORNE",
		4: "DESCENDING",
		5: "DIVERSION",
	}
	FlightStage_value = map[string]int32{
		"UNKNOWN":    0,
		"ON_GROUND":  1,
		"ASCENDING":  2,
		"AIRBORNE":   3,
		"DESCENDING": 4,
		"DIVERSION":  5,
	}
)

func (x FlightStage) Enum() *FlightStage {
	p := new(FlightStage)
	*p = x
	return p
}

func (x FlightStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightStage) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[6].Descriptor()
}

func (FlightStage) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[6]
}

func (x FlightStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightStage.Descriptor instead.
func (FlightStage) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{6}
}

type DelayStatus int32

const (
	DelayStatus_GRAY   DelayStatus = 0
	DelayStatus_GREEN  DelayStatus = 1
	DelayStatus_YELLOW DelayStatus = 2
	DelayStatus_RED    DelayStatus = 3
)

// Enum value maps for DelayStatus.
var (
	DelayStatus_name = map[int32]string{
		0: "GRAY",
		1: "GREEN",
		2: "YELLOW",
		3: "RED",
	}
	DelayStatus_value = map[string]int32{
		"GRAY":   0,
		"GREEN":  1,
		"YELLOW": 2,
		"RED":    3,
	}
)

func (x DelayStatus) Enum() *DelayStatus {
	p := new(DelayStatus)
	*p = x
	return p
}

func (x DelayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[7].Descriptor()
}

func (DelayStatus) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[7]
}

func (x DelayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelayStatus.Descriptor instead.
func (DelayStatus) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{7}
}

// NOTE: unused anywhere
type EmergencyStatus int32

const (
	EmergencyStatus_NO_EMERGENCY                EmergencyStatus = 0
	EmergencyStatus_GENERAL_EMERGENCY           EmergencyStatus = 1
	EmergencyStatus_LIFEGUARD_MEDICAL_EMERGENCY EmergencyStatus = 2
	EmergencyStatus_MINIMUM_FUEL                EmergencyStatus = 3
	EmergencyStatus_NO_COMMUNICATIONS           EmergencyStatus = 4
	EmergencyStatus_UNLAWFUL_INTERFERENCE       EmergencyStatus = 5
	EmergencyStatus_DOWNED_AIRCRAFT             EmergencyStatus = 6
	EmergencyStatus_RESERVED                    EmergencyStatus = 7
)

// Enum value maps for EmergencyStatus.
var (
	EmergencyStatus_name = map[int32]string{
		0: "NO_EMERGENCY",
		1: "GENERAL_EMERGENCY",
		2: "LIFEGUARD_MEDICAL_EMERGENCY",
		3: "MINIMUM_FUEL",
		4: "NO_COMMUNICATIONS",
		5: "UNLAWFUL_INTERFERENCE",
		6: "DOWNED_AIRCRAFT",
		7: "RESERVED",
	}
	EmergencyStatus_value = map[string]int32{
		"NO_EMERGENCY":                0,
		"GENERAL_EMERGENCY":           1,
		"LIFEGUARD_MEDICAL_EMERGENCY": 2,
		"MINIMUM_FUEL":                3,
		"NO_COMMUNICATIONS":           4,
		"UNLAWFUL_INTERFERENCE":       5,
		"DOWNED_AIRCRAFT":             6,
		"RESERVED":                    7,
	}
)

func (x EmergencyStatus) Enum() *EmergencyStatus {
	p := new(EmergencyStatus)
	*p = x
	return p
}

func (x EmergencyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmergencyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto__common_proto_enumTypes[8].Descriptor()
}

func (EmergencyStatus) Type() protoreflect.EnumType {
	return &file_fr24_proto__common_proto_enumTypes[8]
}

func (x EmergencyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmergencyStatus.Descriptor instead.
func (EmergencyStatus) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{8}
}

// Enhanced Mode-S data (EMS)
type EMSInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Qnh           int32                  `protobuf:"varint,1,opt,name=qnh,proto3" json:"qnh,omitempty"`                               // Altimeter setting (QFE or QNH/QNE)
	Amcp          int32                  `protobuf:"varint,2,opt,name=amcp,proto3" json:"amcp,omitempty"`                             // MCP/FCU selected altitude (BDS4,0)
	Afms          int32                  `protobuf:"varint,3,opt,name=afms,proto3" json:"afms,omitempty"`                             // FMS selected altitude (BDS4,0)
	Oat           int32                  `protobuf:"varint,4,opt,name=oat,proto3" json:"oat,omitempty"`                               // Outside air temperature, [TODO: update units]
	Ias           int32                  `protobuf:"varint,5,opt,name=ias,proto3" json:"ias,omitempty"`                               // Indicated airspeed (BDS6,0), knots
	Tas           int32                  `protobuf:"varint,6,opt,name=tas,proto3" json:"tas,omitempty"`                               // True airspeed (BDS0,5), knots
	Mach          int32                  `protobuf:"varint,7,opt,name=mach,proto3" json:"mach,omitempty"`                             // Mach number (BDS6,0), 1e3, e.g., `704` = M0.704
	Agps          int32                  `protobuf:"varint,8,opt,name=agps,proto3" json:"agps,omitempty"`                             // GPS altitude
	Agpsdiff      int32                  `protobuf:"varint,9,opt,name=agpsdiff,proto3" json:"agpsdiff,omitempty"`                     // Difference between amcp and agps
	Apflags       int32                  `protobuf:"varint,10,opt,name=apflags,proto3" json:"apflags,omitempty"`                      // Autopilot flags, often null
	WindDir       int32                  `protobuf:"varint,11,opt,name=wind_dir,json=windDir,proto3" json:"wind_dir,omitempty"`       // Wind direction, [TODO: update units]
	WindSpeed     int32                  `protobuf:"varint,12,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"` // Wind speed, [TODO: update units]
	Rs            int32                  `protobuf:"varint,13,opt,name=rs,proto3" json:"rs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EMSInfo) Reset() {
	*x = EMSInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EMSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMSInfo) ProtoMessage() {}

func (x *EMSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMSInfo.ProtoReflect.Descriptor instead.
func (*EMSInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{0}
}

func (x *EMSInfo) GetQnh() int32 {
	if x != nil {
		return x.Qnh
	}
	return 0
}

func (x *EMSInfo) GetAmcp() int32 {
	if x != nil {
		return x.Amcp
	}
	return 0
}

func (x *EMSInfo) GetAfms() int32 {
	if x != nil {
		return x.Afms
	}
	return 0
}

func (x *EMSInfo) GetOat() int32 {
	if x != nil {
		return x.Oat
	}
	return 0
}

func (x *EMSInfo) GetIas() int32 {
	if x != nil {
		return x.Ias
	}
	return 0
}

func (x *EMSInfo) GetTas() int32 {
	if x != nil {
		return x.Tas
	}
	return 0
}

func (x *EMSInfo) GetMach() int32 {
	if x != nil {
		return x.Mach
	}
	return 0
}

func (x *EMSInfo) GetAgps() int32 {
	if x != nil {
		return x.Agps
	}
	return 0
}

func (x *EMSInfo) GetAgpsdiff() int32 {
	if x != nil {
		return x.Agpsdiff
	}
	return 0
}

func (x *EMSInfo) GetApflags() int32 {
	if x != nil {
		return x.Apflags
	}
	return 0
}

func (x *EMSInfo) GetWindDir() int32 {
	if x != nil {
		return x.WindDir
	}
	return 0
}

func (x *EMSInfo) GetWindSpeed() int32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *EMSInfo) GetRs() int32 {
	if x != nil {
		return x.Rs
	}
	return 0
}

type EMSAvailability struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	QnhAvailability       bool                   `protobuf:"varint,1,opt,name=qnh_availability,json=qnhAvailability,proto3" json:"qnh_availability,omitempty"`
	AmcpAvailability      bool                   `protobuf:"varint,2,opt,name=amcp_availability,json=amcpAvailability,proto3" json:"amcp_availability,omitempty"`
	AfmsAvailability      bool                   `protobuf:"varint,3,opt,name=afms_availability,json=afmsAvailability,proto3" json:"afms_availability,omitempty"`
	OatAvailability       bool                   `protobuf:"varint,4,opt,name=oat_availability,json=oatAvailability,proto3" json:"oat_availability,omitempty"`
	IasAvailability       bool                   `protobuf:"varint,5,opt,name=ias_availability,json=iasAvailability,proto3" json:"ias_availability,omitempty"`
	TasAvailability       bool                   `protobuf:"varint,6,opt,name=tas_availability,json=tasAvailability,proto3" json:"tas_availability,omitempty"`
	MachAvailability      bool                   `protobuf:"varint,7,opt,name=mach_availability,json=machAvailability,proto3" json:"mach_availability,omitempty"`
	AgpsAvailability      bool                   `protobuf:"varint,8,opt,name=agps_availability,json=agpsAvailability,proto3" json:"agps_availability,omitempty"`
	AgpsdiffAvailability  bool                   `protobuf:"varint,9,opt,name=agpsdiff_availability,json=agpsdiffAvailability,proto3" json:"agpsdiff_availability,omitempty"`
	ApflagsAvailability   bool                   `protobuf:"varint,10,opt,name=apflags_availability,json=apflagsAvailability,proto3" json:"apflags_availability,omitempty"`
	WindDirAvailability   bool                   `protobuf:"varint,11,opt,name=wind_dir_availability,json=windDirAvailability,proto3" json:"wind_dir_availability,omitempty"`
	WindSpeedAvailability bool                   `protobuf:"varint,12,opt,name=wind_speed_availability,json=windSpeedAvailability,proto3" json:"wind_speed_availability,omitempty"`
	RsAvailability        bool                   `protobuf:"varint,13,opt,name=rs_availability,json=rsAvailability,proto3" json:"rs_availability,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EMSAvailability) Reset() {
	*x = EMSAvailability{}
	mi := &file_fr24_proto__common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EMSAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMSAvailability) ProtoMessage() {}

func (x *EMSAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMSAvailability.ProtoReflect.Descriptor instead.
func (*EMSAvailability) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{1}
}

func (x *EMSAvailability) GetQnhAvailability() bool {
	if x != nil {
		return x.QnhAvailability
	}
	return false
}

func (x *EMSAvailability) GetAmcpAvailability() bool {
	if x != nil {
		return x.AmcpAvailability
	}
	return false
}

func (x *EMSAvailability) GetAfmsAvailability() bool {
	if x != nil {
		return x.AfmsAvailability
	}
	return false
}

func (x *EMSAvailability) GetOatAvailability() bool {
	if x != nil {
		return x.OatAvailability
	}
	return false
}

func (x *EMSAvailability) GetIasAvailability() bool {
	if x != nil {
		return x.IasAvailability
	}
	return false
}

func (x *EMSAvailability) GetTasAvailability() bool {
	if x != nil {
		return x.TasAvailability
	}
	return false
}

func (x *EMSAvailability) GetMachAvailability() bool {
	if x != nil {
		return x.MachAvailability
	}
	return false
}

func (x *EMSAvailability) GetAgpsAvailability() bool {
	if x != nil {
		return x.AgpsAvailability
	}
	return false
}

func (x *EMSAvailability) GetAgpsdiffAvailability() bool {
	if x != nil {
		return x.AgpsdiffAvailability
	}
	return false
}

func (x *EMSAvailability) GetApflagsAvailability() bool {
	if x != nil {
		return x.ApflagsAvailability
	}
	return false
}

func (x *EMSAvailability) GetWindDirAvailability() bool {
	if x != nil {
		return x.WindDirAvailability
	}
	return false
}

func (x *EMSAvailability) GetWindSpeedAvailability() bool {
	if x != nil {
		return x.WindSpeedAvailability
	}
	return false
}

func (x *EMSAvailability) GetRsAvailability() bool {
	if x != nil {
		return x.RsAvailability
	}
	return false
}

type Schedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Std           int32                  `protobuf:"varint,1,opt,name=std,proto3" json:"std,omitempty"`                                    // Scheduled Time of Departure, Unix timestamp in seconds
	Etd           int32                  `protobuf:"varint,2,opt,name=etd,proto3" json:"etd,omitempty"`                                    // Estimated Time of Departure, Unix timestamp in seconds
	Atd           int32                  `protobuf:"varint,3,opt,name=atd,proto3" json:"atd,omitempty"`                                    // Actual Time of Departure, Unix timestamp in seconds
	Sta           int32                  `protobuf:"varint,4,opt,name=sta,proto3" json:"sta,omitempty"`                                    // Scheduled Time of Arrival, Unix timestamp in seconds
	Eta           int32                  `protobuf:"varint,5,opt,name=eta,proto3" json:"eta,omitempty"`                                    // Estimated Time of Arrival, Unix timestamp in seconds
	Ata           int32                  `protobuf:"varint,6,opt,name=ata,proto3" json:"ata,omitempty"`                                    // Actual Time of Arrival, Unix timestamp in seconds
	ProgressPct   int32                  `protobuf:"varint,7,opt,name=progress_pct,json=progressPct,proto3" json:"progress_pct,omitempty"` // Progress percentage of the flight
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_fr24_proto__common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{2}
}

func (x *Schedule) GetStd() int32 {
	if x != nil {
		return x.Std
	}
	return 0
}

func (x *Schedule) GetEtd() int32 {
	if x != nil {
		return x.Etd
	}
	return 0
}

func (x *Schedule) GetAtd() int32 {
	if x != nil {
		return x.Atd
	}
	return 0
}

func (x *Schedule) GetSta() int32 {
	if x != nil {
		return x.Sta
	}
	return 0
}

func (x *Schedule) GetEta() int32 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *Schedule) GetAta() int32 {
	if x != nil {
		return x.Ata
	}
	return 0
}

func (x *Schedule) GetProgressPct() int32 {
	if x != nil {
		return x.ProgressPct
	}
	return 0
}

type Route struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	DivertedTo    string                 `protobuf:"bytes,3,opt,name=diverted_to,json=divertedTo,proto3" json:"diverted_to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_fr24_proto__common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{3}
}

func (x *Route) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Route) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Route) GetDivertedTo() string {
	if x != nil {
		return x.DivertedTo
	}
	return ""
}

// NOTE: Attributes `operated_by_id` (15), `squawk_availability` (16),
// `vspeed_availability` (17), `airspace_availability` (18),
// `airspace_id` (19), `server_time_ms` (21)
// only available when the flight is selected.
type ExtraFlightInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Flight               string                 `protobuf:"bytes,1,opt,name=flight,proto3" json:"flight,omitempty"` // IATA Flight number, e.g. `CX8747`
	Reg                  string                 `protobuf:"bytes,2,opt,name=reg,proto3" json:"reg,omitempty"`       // Aircraft registration, e.g. `B-HUJ`
	Route                *Route                 `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Type                 string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                        // Aircraft type code, e.g. `B744`
	Squawk               int32                  `protobuf:"varint,5,opt,name=squawk,proto3" json:"squawk,omitempty"`                                   // Squawk code, in base-10. e.g., `20852` (converted from octal)
	Vspeed               int32                  `protobuf:"varint,6,opt,name=vspeed,proto3" json:"vspeed,omitempty"`                                   // Vertical speed, feet per minute
	Age                  string                 `protobuf:"bytes,7,opt,name=age,proto3" json:"age,omitempty"`                                          // Aircraft age, years in string format, e.g., `"17 years"`
	CountryOfReg         int32                  `protobuf:"varint,8,opt,name=country_of_reg,json=countryOfReg,proto3" json:"country_of_reg,omitempty"` // Country code of registration
	Schedule             *Schedule              `protobuf:"bytes,9,opt,name=schedule,proto3" json:"schedule,omitempty"`
	LogoId               int32                  `protobuf:"varint,10,opt,name=logo_id,json=logoId,proto3" json:"logo_id,omitempty"` // Airline logo ID
	Airspace             int32                  `protobuf:"varint,11,opt,name=airspace,proto3" json:"airspace,omitempty"`           // FIR airspace ID
	EmsInfo              *EMSInfo               `protobuf:"bytes,12,opt,name=ems_info,json=emsInfo,proto3" json:"ems_info,omitempty"`
	EmsAvailability      *EMSAvailability       `protobuf:"bytes,13,opt,name=ems_availability,json=emsAvailability,proto3" json:"ems_availability,omitempty"`
	IcaoAddress          uint32                 `protobuf:"varint,14,opt,name=icao_address,json=icaoAddress,proto3" json:"icao_address,omitempty"`      // ICAO 24-bit address of the aircraft (hex)
	OperatedById         uint32                 `protobuf:"varint,15,opt,name=operated_by_id,json=operatedById,proto3" json:"operated_by_id,omitempty"` // Airline ID of the operator
	SquawkAvailability   bool                   `protobuf:"varint,16,opt,name=squawk_availability,json=squawkAvailability,proto3" json:"squawk_availability,omitempty"`
	VspeedAvailability   bool                   `protobuf:"varint,17,opt,name=vspeed_availability,json=vspeedAvailability,proto3" json:"vspeed_availability,omitempty"`
	AirspaceAvailability bool                   `protobuf:"varint,18,opt,name=airspace_availability,json=airspaceAvailability,proto3" json:"airspace_availability,omitempty"`
	AirspaceId           string                 `protobuf:"bytes,19,opt,name=airspace_id,json=airspaceId,proto3" json:"airspace_id,omitempty"` // Airspace ID
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExtraFlightInfo) Reset() {
	*x = ExtraFlightInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtraFlightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraFlightInfo) ProtoMessage() {}

func (x *ExtraFlightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraFlightInfo.ProtoReflect.Descriptor instead.
func (*ExtraFlightInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{4}
}

func (x *ExtraFlightInfo) GetFlight() string {
	if x != nil {
		return x.Flight
	}
	return ""
}

func (x *ExtraFlightInfo) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

func (x *ExtraFlightInfo) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *ExtraFlightInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExtraFlightInfo) GetSquawk() int32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *ExtraFlightInfo) GetVspeed() int32 {
	if x != nil {
		return x.Vspeed
	}
	return 0
}

func (x *ExtraFlightInfo) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *ExtraFlightInfo) GetCountryOfReg() int32 {
	if x != nil {
		return x.CountryOfReg
	}
	return 0
}

func (x *ExtraFlightInfo) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ExtraFlightInfo) GetLogoId() int32 {
	if x != nil {
		return x.LogoId
	}
	return 0
}

func (x *ExtraFlightInfo) GetAirspace() int32 {
	if x != nil {
		return x.Airspace
	}
	return 0
}

func (x *ExtraFlightInfo) GetEmsInfo() *EMSInfo {
	if x != nil {
		return x.EmsInfo
	}
	return nil
}

func (x *ExtraFlightInfo) GetEmsAvailability() *EMSAvailability {
	if x != nil {
		return x.EmsAvailability
	}
	return nil
}

func (x *ExtraFlightInfo) GetIcaoAddress() uint32 {
	if x != nil {
		return x.IcaoAddress
	}
	return 0
}

func (x *ExtraFlightInfo) GetOperatedById() uint32 {
	if x != nil {
		return x.OperatedById
	}
	return 0
}

func (x *ExtraFlightInfo) GetSquawkAvailability() bool {
	if x != nil {
		return x.SquawkAvailability
	}
	return false
}

func (x *ExtraFlightInfo) GetVspeedAvailability() bool {
	if x != nil {
		return x.VspeedAvailability
	}
	return false
}

func (x *ExtraFlightInfo) GetAirspaceAvailability() bool {
	if x != nil {
		return x.AirspaceAvailability
	}
	return false
}

func (x *ExtraFlightInfo) GetAirspaceId() string {
	if x != nil {
		return x.AirspaceId
	}
	return ""
}

type SourceStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        DataSource             `protobuf:"varint,1,opt,name=source,proto3,enum=_common.DataSource" json:"source,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // Number of flights recorded with this source
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceStats) Reset() {
	*x = SourceStats{}
	mi := &file_fr24_proto__common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceStats) ProtoMessage() {}

func (x *SourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceStats.ProtoReflect.Descriptor instead.
func (*SourceStats) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{5}
}

func (x *SourceStats) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *SourceStats) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalList     []*SourceStats         `protobuf:"bytes,1,rep,name=total_list,json=totalList,proto3" json:"total_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stats) Reset() {
	*x = Stats{}
	mi := &file_fr24_proto__common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{6}
}

func (x *Stats) GetTotalList() []*SourceStats {
	if x != nil {
		return x.TotalList
	}
	return nil
}

type RecentPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeltaLat      int32                  `protobuf:"varint,1,opt,name=delta_lat,json=deltaLat,proto3" json:"delta_lat,omitempty"` // Offset from the current latitude, 1e5 degrees
	DeltaLon      int32                  `protobuf:"varint,2,opt,name=delta_lon,json=deltaLon,proto3" json:"delta_lon,omitempty"` // Offset from the current longitude, 1e5 degrees
	DeltaMs       uint32                 `protobuf:"varint,3,opt,name=delta_ms,json=deltaMs,proto3" json:"delta_ms,omitempty"`    // Delta time, milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentPosition) Reset() {
	*x = RecentPosition{}
	mi := &file_fr24_proto__common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentPosition) ProtoMessage() {}

func (x *RecentPosition) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentPosition.ProtoReflect.Descriptor instead.
func (*RecentPosition) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{7}
}

func (x *RecentPosition) GetDeltaLat() int32 {
	if x != nil {
		return x.DeltaLat
	}
	return 0
}

func (x *RecentPosition) GetDeltaLon() int32 {
	if x != nil {
		return x.DeltaLon
	}
	return 0
}

func (x *RecentPosition) GetDeltaMs() uint32 {
	if x != nil {
		return x.DeltaMs
	}
	return 0
}

type PositionBuffer struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecentPositionsList []*RecentPosition      `protobuf:"bytes,1,rep,name=recent_positions_list,json=recentPositionsList,proto3" json:"recent_positions_list,omitempty"` // List of recent positions
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PositionBuffer) Reset() {
	*x = PositionBuffer{}
	mi := &file_fr24_proto__common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionBuffer) ProtoMessage() {}

func (x *PositionBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionBuffer.ProtoReflect.Descriptor instead.
func (*PositionBuffer) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{8}
}

func (x *PositionBuffer) GetRecentPositionsList() []*RecentPosition {
	if x != nil {
		return x.RecentPositionsList
	}
	return nil
}

type Flight struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Flightid       int32                  `protobuf:"varint,1,opt,name=flightid,proto3" json:"flightid,omitempty"` // FR24 flight id, in base-10 integer. Convert to hex for use in URLs.
	Lat            float32                `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`          // Latitude, degrees, -90 to 90
	Lon            float32                `protobuf:"fixed32,3,opt,name=lon,proto3" json:"lon,omitempty"`          // Longitude, degrees, -180 to 180
	Track          int32                  `protobuf:"varint,4,opt,name=track,proto3" json:"track,omitempty"`       // True track angle, degrees clockwise from North
	Alt            int32                  `protobuf:"varint,5,opt,name=alt,proto3" json:"alt,omitempty"`           // Barometric altitude, feet
	Speed          int32                  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`       // Ground speed, knots
	Icon           Icon                   `protobuf:"varint,7,opt,name=icon,proto3,enum=_common.Icon" json:"icon,omitempty"`
	Status         Status                 `protobuf:"varint,8,opt,name=status,proto3,enum=_common.Status" json:"status,omitempty"`
	Timestamp      int32                  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Last update timestamp, Unix timestamp in seconds
	OnGround       bool                   `protobuf:"varint,10,opt,name=on_ground,json=onGround,proto3" json:"on_ground,omitempty"`
	Callsign       string                 `protobuf:"bytes,11,opt,name=callsign,proto3" json:"callsign,omitempty"` // Callsign, e.g. `CPA8747`
	Source         DataSource             `protobuf:"varint,12,opt,name=source,proto3,enum=_common.DataSource" json:"source,omitempty"`
	ExtraInfo      *ExtraFlightInfo       `protobuf:"bytes,13,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	PositionBuffer *PositionBuffer        `protobuf:"bytes,14,opt,name=position_buffer,json=positionBuffer,proto3" json:"position_buffer,omitempty"`
	TimestampMs    uint64                 `protobuf:"varint,15,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"` // Last update timestamp, milliseconds
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Flight) Reset() {
	*x = Flight{}
	mi := &file_fr24_proto__common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{9}
}

func (x *Flight) GetFlightid() int32 {
	if x != nil {
		return x.Flightid
	}
	return 0
}

func (x *Flight) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Flight) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Flight) GetTrack() int32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *Flight) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *Flight) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Flight) GetIcon() Icon {
	if x != nil {
		return x.Icon
	}
	return Icon_B738
}

func (x *Flight) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NORMAL
}

func (x *Flight) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Flight) GetOnGround() bool {
	if x != nil {
		return x.OnGround
	}
	return false
}

func (x *Flight) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *Flight) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *Flight) GetExtraInfo() *ExtraFlightInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Flight) GetPositionBuffer() *PositionBuffer {
	if x != nil {
		return x.PositionBuffer
	}
	return nil
}

func (x *Flight) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

type FlightProgress struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TraversedDistance   uint32                 `protobuf:"varint,1,opt,name=traversed_distance,json=traversedDistance,proto3" json:"traversed_distance,omitempty"`         // Distance traversed in the flight, meters
	RemainingDistance   uint32                 `protobuf:"varint,2,opt,name=remaining_distance,json=remainingDistance,proto3" json:"remaining_distance,omitempty"`         // Remaining distance to destination, meters
	ElapsedTime         uint32                 `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`                           // Elapsed flight time, seconds
	RemainingTime       uint32                 `protobuf:"varint,4,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`                     // Remaining flight time, seconds
	Eta                 uint32                 `protobuf:"varint,5,opt,name=eta,proto3" json:"eta,omitempty"`                                                              // Estimated Time of Arrival, Unix timestamp in seconds
	GreatCircleDistance uint32                 `protobuf:"varint,6,opt,name=great_circle_distance,json=greatCircleDistance,proto3" json:"great_circle_distance,omitempty"` // Great circle distance of the first, meters
	MeanFlightTime      uint32                 `protobuf:"varint,7,opt,name=mean_flight_time,json=meanFlightTime,proto3" json:"mean_flight_time,omitempty"`                // Mean flight time for this route, seconds
	FlightStage         FlightStage            `protobuf:"varint,8,opt,name=flight_stage,json=flightStage,proto3,enum=_common.FlightStage" json:"flight_stage,omitempty"`
	DelayStatus         DelayStatus            `protobuf:"varint,9,opt,name=delay_status,json=delayStatus,proto3,enum=_common.DelayStatus" json:"delay_status,omitempty"`
	ProgressPct         uint32                 `protobuf:"varint,10,opt,name=progress_pct,json=progressPct,proto3" json:"progress_pct,omitempty"` // Flight progress percentage (e.g. `82`)
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FlightProgress) Reset() {
	*x = FlightProgress{}
	mi := &file_fr24_proto__common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightProgress) ProtoMessage() {}

func (x *FlightProgress) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightProgress.ProtoReflect.Descriptor instead.
func (*FlightProgress) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{10}
}

func (x *FlightProgress) GetTraversedDistance() uint32 {
	if x != nil {
		return x.TraversedDistance
	}
	return 0
}

func (x *FlightProgress) GetRemainingDistance() uint32 {
	if x != nil {
		return x.RemainingDistance
	}
	return 0
}

func (x *FlightProgress) GetElapsedTime() uint32 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *FlightProgress) GetRemainingTime() uint32 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *FlightProgress) GetEta() uint32 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *FlightProgress) GetGreatCircleDistance() uint32 {
	if x != nil {
		return x.GreatCircleDistance
	}
	return 0
}

func (x *FlightProgress) GetMeanFlightTime() uint32 {
	if x != nil {
		return x.MeanFlightTime
	}
	return 0
}

func (x *FlightProgress) GetFlightStage() FlightStage {
	if x != nil {
		return x.FlightStage
	}
	return FlightStage_UNKNOWN
}

func (x *FlightProgress) GetDelayStatus() DelayStatus {
	if x != nil {
		return x.DelayStatus
	}
	return DelayStatus_GRAY
}

func (x *FlightProgress) GetProgressPct() uint32 {
	if x != nil {
		return x.ProgressPct
	}
	return 0
}

type ImageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`             // Image URL
	Copyright     string                 `protobuf:"bytes,2,opt,name=copyright,proto3" json:"copyright,omitempty"` // Copyright information (e.g. `"R Skywalker"`)
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"` // URL for thumbnail image (e.g. `"https://cdn.jetphotos.com/200/5/459674_1738674373_tb.jpg"`)
	Medium        string                 `protobuf:"bytes,4,opt,name=medium,proto3" json:"medium,omitempty"`       // URL for medium-sized image (e.g. `"https://cdn.jetphotos.com/400/5/459674_1738674373.jpg"`)
	Large         string                 `protobuf:"bytes,5,opt,name=large,proto3" json:"large,omitempty"`         // URL for large-sized image (e.g. `"https://cdn.jetphotos.com/640/5/459674_1738674373.jpg"`)
	Sideview      string                 `protobuf:"bytes,6,opt,name=sideview,proto3" json:"sideview,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{11}
}

func (x *ImageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageInfo) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *ImageInfo) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ImageInfo) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *ImageInfo) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

func (x *ImageInfo) GetSideview() string {
	if x != nil {
		return x.Sideview
	}
	return ""
}

type AircraftInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	IcaoAddress             uint32                 `protobuf:"varint,1,opt,name=icao_address,json=icaoAddress,proto3" json:"icao_address,omitempty"`      // ICAO 24-bit address of the aircraft
	Reg                     string                 `protobuf:"bytes,2,opt,name=reg,proto3" json:"reg,omitempty"`                                          // Registration number
	CountryOfReg            int32                  `protobuf:"varint,3,opt,name=country_of_reg,json=countryOfReg,proto3" json:"country_of_reg,omitempty"` // Country of registration code (e.g. `3`)
	Type                    string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                        // Aircraft type code (e.g. `"A359"`)
	Icon                    Icon                   `protobuf:"varint,5,opt,name=icon,proto3,enum=_common.Icon" json:"icon,omitempty"`
	FullDescription         string                 `protobuf:"bytes,6,opt,name=full_description,json=fullDescription,proto3" json:"full_description,omitempty"` // Full aircraft description (e.g. `"Airbus A350-941"`)
	Msn                     string                 `protobuf:"bytes,7,opt,name=msn,proto3" json:"msn,omitempty"`
	Service                 Service                `protobuf:"varint,8,opt,name=service,proto3,enum=_common.Service" json:"service,omitempty"`
	AcBirthDate             string                 `protobuf:"bytes,9,opt,name=ac_birth_date,json=acBirthDate,proto3" json:"ac_birth_date,omitempty"` // Aircraft birth date string (e.g. `"2017-06-28"`)
	AcAge                   uint32                 `protobuf:"varint,10,opt,name=ac_age,json=acAge,proto3" json:"ac_age,omitempty"`                   // Aircraft age
	ImagesList              []*ImageInfo           `protobuf:"bytes,11,rep,name=images_list,json=imagesList,proto3" json:"images_list,omitempty"`
	IsTestFlight            bool                   `protobuf:"varint,12,opt,name=is_test_flight,json=isTestFlight,proto3" json:"is_test_flight,omitempty"`
	MsnAvailable            bool                   `protobuf:"varint,13,opt,name=msn_available,json=msnAvailable,proto3" json:"msn_available,omitempty"`
	AgeAvailable            bool                   `protobuf:"varint,14,opt,name=age_available,json=ageAvailable,proto3" json:"age_available,omitempty"`
	RegisteredOwners        string                 `protobuf:"bytes,15,opt,name=registered_owners,json=registeredOwners,proto3" json:"registered_owners,omitempty"` // Aircraft owner name (e.g. `"Air France"`)
	IsCountryOfRegAvailable bool                   `protobuf:"varint,16,opt,name=is_country_of_reg_available,json=isCountryOfRegAvailable,proto3" json:"is_country_of_reg_available,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AircraftInfo) Reset() {
	*x = AircraftInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AircraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftInfo) ProtoMessage() {}

func (x *AircraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftInfo.ProtoReflect.Descriptor instead.
func (*AircraftInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{12}
}

func (x *AircraftInfo) GetIcaoAddress() uint32 {
	if x != nil {
		return x.IcaoAddress
	}
	return 0
}

func (x *AircraftInfo) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

func (x *AircraftInfo) GetCountryOfReg() int32 {
	if x != nil {
		return x.CountryOfReg
	}
	return 0
}

func (x *AircraftInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AircraftInfo) GetIcon() Icon {
	if x != nil {
		return x.Icon
	}
	return Icon_B738
}

func (x *AircraftInfo) GetFullDescription() string {
	if x != nil {
		return x.FullDescription
	}
	return ""
}

func (x *AircraftInfo) GetMsn() string {
	if x != nil {
		return x.Msn
	}
	return ""
}

func (x *AircraftInfo) GetService() Service {
	if x != nil {
		return x.Service
	}
	return Service_PASSENGER
}

func (x *AircraftInfo) GetAcBirthDate() string {
	if x != nil {
		return x.AcBirthDate
	}
	return ""
}

func (x *AircraftInfo) GetAcAge() uint32 {
	if x != nil {
		return x.AcAge
	}
	return 0
}

func (x *AircraftInfo) GetImagesList() []*ImageInfo {
	if x != nil {
		return x.ImagesList
	}
	return nil
}

func (x *AircraftInfo) GetIsTestFlight() bool {
	if x != nil {
		return x.IsTestFlight
	}
	return false
}

func (x *AircraftInfo) GetMsnAvailable() bool {
	if x != nil {
		return x.MsnAvailable
	}
	return false
}

func (x *AircraftInfo) GetAgeAvailable() bool {
	if x != nil {
		return x.AgeAvailable
	}
	return false
}

func (x *AircraftInfo) GetRegisteredOwners() string {
	if x != nil {
		return x.RegisteredOwners
	}
	return ""
}

func (x *AircraftInfo) GetIsCountryOfRegAvailable() bool {
	if x != nil {
		return x.IsCountryOfRegAvailable
	}
	return false
}

type Point struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      int32                  `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   // Latitude, degrees, -90 to 90
	Longitude     int32                  `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"` // Longitude, degrees, -180 to 180
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_fr24_proto__common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{13}
}

func (x *Point) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Coordinate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Point         *Point                 `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	mi := &file_fr24_proto__common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{14}
}

func (x *Coordinate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Coordinate) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

type Fix struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Airport       string                 `protobuf:"bytes,1,opt,name=airport,proto3" json:"airport,omitempty"`
	Area          string                 `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	Coordinate    *Coordinate            `protobuf:"bytes,3,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fix) Reset() {
	*x = Fix{}
	mi := &file_fr24_proto__common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fix) ProtoMessage() {}

func (x *Fix) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fix.ProtoReflect.Descriptor instead.
func (*Fix) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{15}
}

func (x *Fix) GetAirport() string {
	if x != nil {
		return x.Airport
	}
	return ""
}

func (x *Fix) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Fix) GetCoordinate() *Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

type AltArrival struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Arrival       *Fix                   `protobuf:"bytes,1,opt,name=arrival,proto3" json:"arrival,omitempty"`
	Length        float32                `protobuf:"fixed32,2,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AltArrival) Reset() {
	*x = AltArrival{}
	mi := &file_fr24_proto__common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AltArrival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltArrival) ProtoMessage() {}

func (x *AltArrival) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltArrival.ProtoReflect.Descriptor instead.
func (*AltArrival) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{16}
}

func (x *AltArrival) GetArrival() *Fix {
	if x != nil {
		return x.Arrival
	}
	return nil
}

func (x *AltArrival) GetLength() float32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type FlightPlan struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Departure      string                 `protobuf:"bytes,1,opt,name=departure,proto3" json:"departure,omitempty"`
	Destination    string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	FlightPlanIcao string                 `protobuf:"bytes,3,opt,name=flight_plan_icao,json=flightPlanIcao,proto3" json:"flight_plan_icao,omitempty"`
	Length         float64                `protobuf:"fixed64,4,opt,name=length,proto3" json:"length,omitempty"`
	AltArrival_1   *AltArrival            `protobuf:"bytes,5,opt,name=alt_arrival_1,json=altArrival1,proto3" json:"alt_arrival_1,omitempty"`
	AltArrival_2   *AltArrival            `protobuf:"bytes,6,opt,name=alt_arrival_2,json=altArrival2,proto3" json:"alt_arrival_2,omitempty"`
	WaypointsList  []*Point               `protobuf:"bytes,7,rep,name=waypoints_list,json=waypointsList,proto3" json:"waypoints_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlightPlan) Reset() {
	*x = FlightPlan{}
	mi := &file_fr24_proto__common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightPlan) ProtoMessage() {}

func (x *FlightPlan) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightPlan.ProtoReflect.Descriptor instead.
func (*FlightPlan) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{17}
}

func (x *FlightPlan) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *FlightPlan) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *FlightPlan) GetFlightPlanIcao() string {
	if x != nil {
		return x.FlightPlanIcao
	}
	return ""
}

func (x *FlightPlan) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FlightPlan) GetAltArrival_1() *AltArrival {
	if x != nil {
		return x.AltArrival_1
	}
	return nil
}

func (x *FlightPlan) GetAltArrival_2() *AltArrival {
	if x != nil {
		return x.AltArrival_2
	}
	return nil
}

func (x *FlightPlan) GetWaypointsList() []*Point {
	if x != nil {
		return x.WaypointsList
	}
	return nil
}

type ScheduleInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FlightNumber       string                 `protobuf:"bytes,1,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`                    // Flight number with airline prefix (e.g. `"AF334"`)
	OperatedById       uint32                 `protobuf:"varint,2,opt,name=operated_by_id,json=operatedById,proto3" json:"operated_by_id,omitempty"`                 // ID of the operating airline (e.g. `15`)
	PaintedAsId        uint32                 `protobuf:"varint,3,opt,name=painted_as_id,json=paintedAsId,proto3" json:"painted_as_id,omitempty"`                    // ID of the airline the aircraft is painted as (e.g. `15`)
	OriginId           uint32                 `protobuf:"varint,4,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`                               // Origin airport ID (e.g. `598`)
	DestinationId      uint32                 `protobuf:"varint,5,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`                // Destination airport ID (e.g. `451`)
	DivertedToId       uint32                 `protobuf:"varint,6,opt,name=diverted_to_id,json=divertedToId,proto3" json:"diverted_to_id,omitempty"`                 // Diverted to airport ID
	ScheduledDeparture uint32                 `protobuf:"varint,7,opt,name=scheduled_departure,json=scheduledDeparture,proto3" json:"scheduled_departure,omitempty"` // Scheduled Time of Departure, Unix timestamp in seconds
	ScheduledArrival   uint32                 `protobuf:"varint,8,opt,name=scheduled_arrival,json=scheduledArrival,proto3" json:"scheduled_arrival,omitempty"`       // Scheduled Time of Arrival, Unix timestamp in seconds
	ActualDeparture    uint32                 `protobuf:"varint,9,opt,name=actual_departure,json=actualDeparture,proto3" json:"actual_departure,omitempty"`          // Actual Time of Departure, Unix timestamp in seconds
	ActualArrival      uint32                 `protobuf:"varint,10,opt,name=actual_arrival,json=actualArrival,proto3" json:"actual_arrival,omitempty"`               // Actual Time of Arrival, Unix timestamp in seconds
	ArrTerminal        string                 `protobuf:"bytes,11,opt,name=arr_terminal,json=arrTerminal,proto3" json:"arr_terminal,omitempty"`                      // Arrival terminal (e.g. `"E"`)
	ArrGate            string                 `protobuf:"bytes,12,opt,name=arr_gate,json=arrGate,proto3" json:"arr_gate,omitempty"`                                  // Arrival gate (e.g. `"E6"`)
	BaggageBelt        string                 `protobuf:"bytes,13,opt,name=baggage_belt,json=baggageBelt,proto3" json:"baggage_belt,omitempty"`                      // Baggage belt (e.g. `"4"`)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ScheduleInfo) Reset() {
	*x = ScheduleInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfo) ProtoMessage() {}

func (x *ScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfo.ProtoReflect.Descriptor instead.
func (*ScheduleInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{18}
}

func (x *ScheduleInfo) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *ScheduleInfo) GetOperatedById() uint32 {
	if x != nil {
		return x.OperatedById
	}
	return 0
}

func (x *ScheduleInfo) GetPaintedAsId() uint32 {
	if x != nil {
		return x.PaintedAsId
	}
	return 0
}

func (x *ScheduleInfo) GetOriginId() uint32 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *ScheduleInfo) GetDestinationId() uint32 {
	if x != nil {
		return x.DestinationId
	}
	return 0
}

func (x *ScheduleInfo) GetDivertedToId() uint32 {
	if x != nil {
		return x.DivertedToId
	}
	return 0
}

func (x *ScheduleInfo) GetScheduledDeparture() uint32 {
	if x != nil {
		return x.ScheduledDeparture
	}
	return 0
}

func (x *ScheduleInfo) GetScheduledArrival() uint32 {
	if x != nil {
		return x.ScheduledArrival
	}
	return 0
}

func (x *ScheduleInfo) GetActualDeparture() uint32 {
	if x != nil {
		return x.ActualDeparture
	}
	return 0
}

func (x *ScheduleInfo) GetActualArrival() uint32 {
	if x != nil {
		return x.ActualArrival
	}
	return 0
}

func (x *ScheduleInfo) GetArrTerminal() string {
	if x != nil {
		return x.ArrTerminal
	}
	return ""
}

func (x *ScheduleInfo) GetArrGate() string {
	if x != nil {
		return x.ArrGate
	}
	return ""
}

func (x *ScheduleInfo) GetBaggageBelt() string {
	if x != nil {
		return x.BaggageBelt
	}
	return ""
}

type ExtendedFlightInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Flightid             uint32                 `protobuf:"varint,1,opt,name=flightid,proto3" json:"flightid,omitempty"` // Flight ID (e.g. `962788562` = `0x3962fcd2`)
	Lat                  float32                `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`          // Latitude, degrees, -90 to 90
	Lon                  float32                `protobuf:"fixed32,3,opt,name=lon,proto3" json:"lon,omitempty"`          // Longitude, degrees, -180 to 180
	Track                int32                  `protobuf:"varint,4,opt,name=track,proto3" json:"track,omitempty"`       // True track angle, degrees clockwise from North
	Alt                  int32                  `protobuf:"varint,5,opt,name=alt,proto3" json:"alt,omitempty"`           // Altitude, feet
	Speed                int32                  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`       // Ground Speed, knots
	Status               Status                 `protobuf:"varint,7,opt,name=status,proto3,enum=_common.Status" json:"status,omitempty"`
	TimestampMs          uint64                 `protobuf:"varint,8,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"` // Unix timestamp of message, milliseconds (e.g. `1741377144019`)
	OnGround             bool                   `protobuf:"varint,9,opt,name=on_ground,json=onGround,proto3" json:"on_ground,omitempty"`
	Callsign             string                 `protobuf:"bytes,10,opt,name=callsign,proto3" json:"callsign,omitempty"` // Callsign (e.g. `"AFR334"`)
	Source               DataSource             `protobuf:"varint,11,opt,name=source,proto3,enum=_common.DataSource" json:"source,omitempty"`
	EmsAvailability      *EMSAvailability       `protobuf:"bytes,12,opt,name=ems_availability,json=emsAvailability,proto3" json:"ems_availability,omitempty"`
	EmsInfo              *EMSInfo               `protobuf:"bytes,13,opt,name=ems_info,json=emsInfo,proto3" json:"ems_info,omitempty"`
	SquawkAvailability   bool                   `protobuf:"varint,14,opt,name=squawk_availability,json=squawkAvailability,proto3" json:"squawk_availability,omitempty"`
	Squawk               int32                  `protobuf:"varint,15,opt,name=squawk,proto3" json:"squawk,omitempty"` // Squawk code, in base-10 (e.g. `3041` = 0o5741)
	VspeedAvailability   bool                   `protobuf:"varint,16,opt,name=vspeed_availability,json=vspeedAvailability,proto3" json:"vspeed_availability,omitempty"`
	Vspeed               int32                  `protobuf:"varint,17,opt,name=vspeed,proto3" json:"vspeed,omitempty"` // Vertical speed (e.g. `3328`)
	AirspaceAvailability bool                   `protobuf:"varint,18,opt,name=airspace_availability,json=airspaceAvailability,proto3" json:"airspace_availability,omitempty"`
	Airspace             string                 `protobuf:"bytes,19,opt,name=airspace,proto3" json:"airspace,omitempty"`                                // Airspace, free-form text (e.g. `"Shannon UIR"`)
	AirspaceId           string                 `protobuf:"bytes,20,opt,name=airspace_id,json=airspaceId,proto3" json:"airspace_id,omitempty"`          // Airspace ID (e.g. `"FIR_EINN_U"`)
	ServerTimeMs         uint64                 `protobuf:"varint,21,opt,name=server_time_ms,json=serverTimeMs,proto3" json:"server_time_ms,omitempty"` // Server timestamp, Unix timestamp in milliseconds (e.g. `1741377145974`)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExtendedFlightInfo) Reset() {
	*x = ExtendedFlightInfo{}
	mi := &file_fr24_proto__common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendedFlightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedFlightInfo) ProtoMessage() {}

func (x *ExtendedFlightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedFlightInfo.ProtoReflect.Descriptor instead.
func (*ExtendedFlightInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{19}
}

func (x *ExtendedFlightInfo) GetFlightid() uint32 {
	if x != nil {
		return x.Flightid
	}
	return 0
}

func (x *ExtendedFlightInfo) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *ExtendedFlightInfo) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *ExtendedFlightInfo) GetTrack() int32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *ExtendedFlightInfo) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *ExtendedFlightInfo) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *ExtendedFlightInfo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NORMAL
}

func (x *ExtendedFlightInfo) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *ExtendedFlightInfo) GetOnGround() bool {
	if x != nil {
		return x.OnGround
	}
	return false
}

func (x *ExtendedFlightInfo) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *ExtendedFlightInfo) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *ExtendedFlightInfo) GetEmsAvailability() *EMSAvailability {
	if x != nil {
		return x.EmsAvailability
	}
	return nil
}

func (x *ExtendedFlightInfo) GetEmsInfo() *EMSInfo {
	if x != nil {
		return x.EmsInfo
	}
	return nil
}

func (x *ExtendedFlightInfo) GetSquawkAvailability() bool {
	if x != nil {
		return x.SquawkAvailability
	}
	return false
}

func (x *ExtendedFlightInfo) GetSquawk() int32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *ExtendedFlightInfo) GetVspeedAvailability() bool {
	if x != nil {
		return x.VspeedAvailability
	}
	return false
}

func (x *ExtendedFlightInfo) GetVspeed() int32 {
	if x != nil {
		return x.Vspeed
	}
	return 0
}

func (x *ExtendedFlightInfo) GetAirspaceAvailability() bool {
	if x != nil {
		return x.AirspaceAvailability
	}
	return false
}

func (x *ExtendedFlightInfo) GetAirspace() string {
	if x != nil {
		return x.Airspace
	}
	return ""
}

func (x *ExtendedFlightInfo) GetAirspaceId() string {
	if x != nil {
		return x.AirspaceId
	}
	return ""
}

func (x *ExtendedFlightInfo) GetServerTimeMs() uint64 {
	if x != nil {
		return x.ServerTimeMs
	}
	return 0
}

type TrailPoint struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	SnapshotId uint64                 `protobuf:"varint,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"` // Snapshot ID, likely Unix timestamp in seconds (e.g. `1741356300`)
	Lat        float32                `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`                                // Latitude, degrees, -90 to 90
	Lon        float32                `protobuf:"fixed32,3,opt,name=lon,proto3" json:"lon,omitempty"`                                // Longitude, degrees, -180 to 180
	Altitude   int32                  `protobuf:"varint,4,opt,name=altitude,proto3" json:"altitude,omitempty"`                       // Altitude, feet
	Spd        uint32                 `protobuf:"varint,5,opt,name=spd,proto3" json:"spd,omitempty"`                                 // Ground speed, knots
	// True track angle, degrees clockwise from North.
	// Note: despite the name, heading is not transmitted in ADS-B.
	Heading       uint32 `protobuf:"varint,6,opt,name=heading,proto3" json:"heading,omitempty"`
	Vspd          int32  `protobuf:"varint,7,opt,name=vspd,proto3" json:"vspd,omitempty"` // Vertical Speed, feet per minute
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrailPoint) Reset() {
	*x = TrailPoint{}
	mi := &file_fr24_proto__common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrailPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrailPoint) ProtoMessage() {}

func (x *TrailPoint) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrailPoint.ProtoReflect.Descriptor instead.
func (*TrailPoint) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{20}
}

func (x *TrailPoint) GetSnapshotId() uint64 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

func (x *TrailPoint) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *TrailPoint) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *TrailPoint) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TrailPoint) GetSpd() uint32 {
	if x != nil {
		return x.Spd
	}
	return 0
}

func (x *TrailPoint) GetHeading() uint32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *TrailPoint) GetVspd() int32 {
	if x != nil {
		return x.Vspd
	}
	return 0
}

// used in CountDown service
type Duration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         uint32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Duration) Reset() {
	*x = Duration{}
	mi := &file_fr24_proto__common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{21}
}

func (x *Duration) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Tick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         uint32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_fr24_proto__common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{22}
}

func (x *Tick) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// used in *trail services
type RadarHistoryRecord struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Observation timestamp, Unix timestamp in seconds
	Lat       float32                `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`            // Latitude, degrees, -90 to 90
	Lon       float32                `protobuf:"fixed32,3,opt,name=lon,proto3" json:"lon,omitempty"`            // Longitude, degrees, -180 to 180
	Altitude  int32                  `protobuf:"varint,4,opt,name=altitude,proto3" json:"altitude,omitempty"`   // Altitude, feet
	Spd       uint32                 `protobuf:"varint,5,opt,name=spd,proto3" json:"spd,omitempty"`             // Ground Speed, knots
	// True track angle, degrees clockwise from North.
	// Note: despite the name, heading is not transmitted in ADS-B.
	Heading       uint32     `protobuf:"varint,6,opt,name=heading,proto3" json:"heading,omitempty"`
	Vspd          int32      `protobuf:"varint,7,opt,name=vspd,proto3" json:"vspd,omitempty"` // Vertical speed, feet per minute
	Squawk        uint32     `protobuf:"varint,8,opt,name=squawk,proto3" json:"squawk,omitempty"`
	Source        DataSource `protobuf:"varint,9,opt,name=source,proto3,enum=_common.DataSource" json:"source,omitempty"`
	Callsign      string     `protobuf:"bytes,10,opt,name=callsign,proto3" json:"callsign,omitempty"` // Callsign, e.g. `CPA959`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RadarHistoryRecord) Reset() {
	*x = RadarHistoryRecord{}
	mi := &file_fr24_proto__common_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RadarHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarHistoryRecord) ProtoMessage() {}

func (x *RadarHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto__common_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarHistoryRecord.ProtoReflect.Descriptor instead.
func (*RadarHistoryRecord) Descriptor() ([]byte, []int) {
	return file_fr24_proto__common_proto_rawDescGZIP(), []int{23}
}

func (x *RadarHistoryRecord) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RadarHistoryRecord) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RadarHistoryRecord) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *RadarHistoryRecord) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *RadarHistoryRecord) GetSpd() uint32 {
	if x != nil {
		return x.Spd
	}
	return 0
}

func (x *RadarHistoryRecord) GetHeading() uint32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *RadarHistoryRecord) GetVspd() int32 {
	if x != nil {
		return x.Vspd
	}
	return 0
}

func (x *RadarHistoryRecord) GetSquawk() uint32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *RadarHistoryRecord) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *RadarHistoryRecord) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

var File_fr24_proto__common_proto protoreflect.FileDescriptor

const file_fr24_proto__common_proto_rawDesc = "" +
	"\n" +
	"\x18fr24/proto/_common.proto\x12\a_common\"\xa1\x02\n" +
	"\aEMSInfo\x12\x10\n" +
	"\x03qnh\x18\x01 \x01(\x05R\x03qnh\x12\x12\n" +
	"\x04amcp\x18\x02 \x01(\x05R\x04amcp\x12\x12\n" +
	"\x04afms\x18\x03 \x01(\x05R\x04afms\x12\x10\n" +
	"\x03oat\x18\x04 \x01(\x05R\x03oat\x12\x10\n" +
	"\x03ias\x18\x05 \x01(\x05R\x03ias\x12\x10\n" +
	"\x03tas\x18\x06 \x01(\x05R\x03tas\x12\x12\n" +
	"\x04mach\x18\a \x01(\x05R\x04mach\x12\x12\n" +
	"\x04agps\x18\b \x01(\x05R\x04agps\x12\x1a\n" +
	"\bagpsdiff\x18\t \x01(\x05R\bagpsdiff\x12\x18\n" +
	"\aapflags\x18\n" +
	" \x01(\x05R\aapflags\x12\x19\n" +
	"\bwind_dir\x18\v \x01(\x05R\awindDir\x12\x1d\n" +
	"\n" +
	"wind_speed\x18\f \x01(\x05R\twindSpeed\x12\x0e\n" +
	"\x02rs\x18\r \x01(\x05R\x02rs\"\xee\x04\n" +
	"\x0fEMSAvailability\x12)\n" +
	"\x10qnh_availability\x18\x01 \x01(\bR\x0fqnhAvailability\x12+\n" +
	"\x11amcp_availability\x18\x02 \x01(\bR\x10amcpAvailability\x12+\n" +
	"\x11afms_availability\x18\x03 \x01(\bR\x10afmsAvailability\x12)\n" +
	"\x10oat_availability\x18\x04 \x01(\bR\x0foatAvailability\x12)\n" +
	"\x10ias_availability\x18\x05 \x01(\bR\x0fiasAvailability\x12)\n" +
	"\x10tas_availability\x18\x06 \x01(\bR\x0ftasAvailability\x12+\n" +
	"\x11mach_availability\x18\a \x01(\bR\x10machAvailability\x12+\n" +
	"\x11agps_availability\x18\b \x01(\bR\x10agpsAvailability\x123\n" +
	"\x15agpsdiff_availability\x18\t \x01(\bR\x14agpsdiffAvailability\x121\n" +
	"\x14apflags_availability\x18\n" +
	" \x01(\bR\x13apflagsAvailability\x122\n" +
	"\x15wind_dir_availability\x18\v \x01(\bR\x13windDirAvailability\x126\n" +
	"\x17wind_speed_availability\x18\f \x01(\bR\x15windSpeedAvailability\x12'\n" +
	"\x0frs_availability\x18\r \x01(\bR\x0ersAvailability\"\x99\x01\n" +
	"\bSchedule\x12\x10\n" +
	"\x03std\x18\x01 \x01(\x05R\x03std\x12\x10\n" +
	"\x03etd\x18\x02 \x01(\x05R\x03etd\x12\x10\n" +
	"\x03atd\x18\x03 \x01(\x05R\x03atd\x12\x10\n" +
	"\x03sta\x18\x04 \x01(\x05R\x03sta\x12\x10\n" +
	"\x03eta\x18\x05 \x01(\x05R\x03eta\x12\x10\n" +
	"\x03ata\x18\x06 \x01(\x05R\x03ata\x12!\n" +
	"\fprogress_pct\x18\a \x01(\x05R\vprogressPct\"L\n" +
	"\x05Route\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x1f\n" +
	"\vdiverted_to\x18\x03 \x01(\tR\n" +
	"divertedTo\"\xb4\x05\n" +
	"\x0fExtraFlightInfo\x12\x16\n" +
	"\x06flight\x18\x01 \x01(\tR\x06flight\x12\x10\n" +
	"\x03reg\x18\x02 \x01(\tR\x03reg\x12$\n" +
	"\x05route\x18\x03 \x01(\v2\x0e._common.RouteR\x05route\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12\x16\n" +
	"\x06squawk\x18\x05 \x01(\x05R\x06squawk\x12\x16\n" +
	"\x06vspeed\x18\x06 \x01(\x05R\x06vspeed\x12\x10\n" +
	"\x03age\x18\a \x01(\tR\x03age\x12$\n" +
	"\x0ecountry_of_reg\x18\b \x01(\x05R\fcountryOfReg\x12-\n" +
	"\bschedule\x18\t \x01(\v2\x11._common.ScheduleR\bschedule\x12\x17\n" +
	"\alogo_id\x18\n" +
	" \x01(\x05R\x06logoId\x12\x1a\n" +
	"\bairspace\x18\v \x01(\x05R\bairspace\x12+\n" +
	"\bems_info\x18\f \x01(\v2\x10._common.EMSInfoR\aemsInfo\x12C\n" +
	"\x10ems_availability\x18\r \x01(\v2\x18._common.EMSAvailabilityR\x0femsAvailability\x12!\n" +
	"\ficao_address\x18\x0e \x01(\rR\vicaoAddress\x12$\n" +
	"\x0eoperated_by_id\x18\x0f \x01(\rR\foperatedById\x12/\n" +
	"\x13squawk_availability\x18\x10 \x01(\bR\x12squawkAvailability\x12/\n" +
	"\x13vspeed_availability\x18\x11 \x01(\bR\x12vspeedAvailability\x123\n" +
	"\x15airspace_availability\x18\x12 \x01(\bR\x14airspaceAvailability\x12\x1f\n" +
	"\vairspace_id\x18\x13 \x01(\tR\n" +
	"airspaceId\"P\n" +
	"\vSourceStats\x12+\n" +
	"\x06source\x18\x01 \x01(\x0e2\x13._common.DataSourceR\x06source\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"<\n" +
	"\x05Stats\x123\n" +
	"\n" +
	"total_list\x18\x01 \x03(\v2\x14._common.SourceStatsR\ttotalList\"e\n" +
	"\x0eRecentPosition\x12\x1b\n" +
	"\tdelta_lat\x18\x01 \x01(\x05R\bdeltaLat\x12\x1b\n" +
	"\tdelta_lon\x18\x02 \x01(\x05R\bdeltaLon\x12\x19\n" +
	"\bdelta_ms\x18\x03 \x01(\rR\adeltaMs\"]\n" +
	"\x0ePositionBuffer\x12K\n" +
	"\x15recent_positions_list\x18\x01 \x03(\v2\x17._common.RecentPositionR\x13recentPositionsList\"\xf4\x03\n" +
	"\x06Flight\x12\x1a\n" +
	"\bflightid\x18\x01 \x01(\x05R\bflightid\x12\x10\n" +
	"\x03lat\x18\x02 \x01(\x02R\x03lat\x12\x10\n" +
	"\x03lon\x18\x03 \x01(\x02R\x03lon\x12\x14\n" +
	"\x05track\x18\x04 \x01(\x05R\x05track\x12\x10\n" +
	"\x03alt\x18\x05 \x01(\x05R\x03alt\x12\x14\n" +
	"\x05speed\x18\x06 \x01(\x05R\x05speed\x12!\n" +
	"\x04icon\x18\a \x01(\x0e2\r._common.IconR\x04icon\x12'\n" +
	"\x06status\x18\b \x01(\x0e2\x0f._common.StatusR\x06status\x12\x1c\n" +
	"\ttimestamp\x18\t \x01(\x05R\ttimestamp\x12\x1b\n" +
	"\ton_ground\x18\n" +
	" \x01(\bR\bonGround\x12\x1a\n" +
	"\bcallsign\x18\v \x01(\tR\bcallsign\x12+\n" +
	"\x06source\x18\f \x01(\x0e2\x13._common.DataSourceR\x06source\x127\n" +
	"\n" +
	"extra_info\x18\r \x01(\v2\x18._common.ExtraFlightInfoR\textraInfo\x12@\n" +
	"\x0fposition_buffer\x18\x0e \x01(\v2\x17._common.PositionBufferR\x0epositionBuffer\x12!\n" +
	"\ftimestamp_ms\x18\x0f \x01(\x04R\vtimestampMs\"\xbd\x03\n" +
	"\x0eFlightProgress\x12-\n" +
	"\x12traversed_distance\x18\x01 \x01(\rR\x11traversedDistance\x12-\n" +
	"\x12remaining_distance\x18\x02 \x01(\rR\x11remainingDistance\x12!\n" +
	"\felapsed_time\x18\x03 \x01(\rR\velapsedTime\x12%\n" +
	"\x0eremaining_time\x18\x04 \x01(\rR\rremainingTime\x12\x10\n" +
	"\x03eta\x18\x05 \x01(\rR\x03eta\x122\n" +
	"\x15great_circle_distance\x18\x06 \x01(\rR\x13greatCircleDistance\x12(\n" +
	"\x10mean_flight_time\x18\a \x01(\rR\x0emeanFlightTime\x127\n" +
	"\fflight_stage\x18\b \x01(\x0e2\x14._common.FlightStageR\vflightStage\x127\n" +
	"\fdelay_status\x18\t \x01(\x0e2\x14._common.DelayStatusR\vdelayStatus\x12!\n" +
	"\fprogress_pct\x18\n" +
	" \x01(\rR\vprogressPct\"\xa3\x01\n" +
	"\tImageInfo\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1c\n" +
	"\tcopyright\x18\x02 \x01(\tR\tcopyright\x12\x1c\n" +
	"\tthumbnail\x18\x03 \x01(\tR\tthumbnail\x12\x16\n" +
	"\x06medium\x18\x04 \x01(\tR\x06medium\x12\x14\n" +
	"\x05large\x18\x05 \x01(\tR\x05large\x12\x1a\n" +
	"\bsideview\x18\x06 \x01(\tR\bsideview\"\xd4\x04\n" +
	"\fAircraftInfo\x12!\n" +
	"\ficao_address\x18\x01 \x01(\rR\vicaoAddress\x12\x10\n" +
	"\x03reg\x18\x02 \x01(\tR\x03reg\x12$\n" +
	"\x0ecountry_of_reg\x18\x03 \x01(\x05R\fcountryOfReg\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12!\n" +
	"\x04icon\x18\x05 \x01(\x0e2\r._common.IconR\x04icon\x12)\n" +
	"\x10full_description\x18\x06 \x01(\tR\x0ffullDescription\x12\x10\n" +
	"\x03msn\x18\a \x01(\tR\x03msn\x12*\n" +
	"\aservice\x18\b \x01(\x0e2\x10._common.ServiceR\aservice\x12\"\n" +
	"\rac_birth_date\x18\t \x01(\tR\vacBirthDate\x12\x15\n" +
	"\x06ac_age\x18\n" +
	" \x01(\rR\x05acAge\x123\n" +
	"\vimages_list\x18\v \x03(\v2\x12._common.ImageInfoR\n" +
	"imagesList\x12$\n" +
	"\x0eis_test_flight\x18\f \x01(\bR\fisTestFlight\x12#\n" +
	"\rmsn_available\x18\r \x01(\bR\fmsnAvailable\x12#\n" +
	"\rage_available\x18\x0e \x01(\bR\fageAvailable\x12+\n" +
	"\x11registered_owners\x18\x0f \x01(\tR\x10registeredOwners\x12<\n" +
	"\x1bis_country_of_reg_available\x18\x10 \x01(\bR\x17isCountryOfRegAvailable\"A\n" +
	"\x05Point\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x05R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x05R\tlongitude\"F\n" +
	"\n" +
	"Coordinate\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12$\n" +
	"\x05point\x18\x02 \x01(\v2\x0e._common.PointR\x05point\"h\n" +
	"\x03Fix\x12\x18\n" +
	"\aairport\x18\x01 \x01(\tR\aairport\x12\x12\n" +
	"\x04area\x18\x02 \x01(\tR\x04area\x123\n" +
	"\n" +
	"coordinate\x18\x03 \x01(\v2\x13._common.CoordinateR\n" +
	"coordinate\"L\n" +
	"\n" +
	"AltArrival\x12&\n" +
	"\aarrival\x18\x01 \x01(\v2\f._common.FixR\aarrival\x12\x16\n" +
	"\x06length\x18\x02 \x01(\x02R\x06length\"\xb7\x02\n" +
	"\n" +
	"FlightPlan\x12\x1c\n" +
	"\tdeparture\x18\x01 \x01(\tR\tdeparture\x12 \n" +
	"\vdestination\x18\x02 \x01(\tR\vdestination\x12(\n" +
	"\x10flight_plan_icao\x18\x03 \x01(\tR\x0eflightPlanIcao\x12\x16\n" +
	"\x06length\x18\x04 \x01(\x01R\x06length\x127\n" +
	"\ralt_arrival_1\x18\x05 \x01(\v2\x13._common.AltArrivalR\valtArrival1\x127\n" +
	"\ralt_arrival_2\x18\x06 \x01(\v2\x13._common.AltArrivalR\valtArrival2\x125\n" +
	"\x0ewaypoints_list\x18\a \x03(\v2\x0e._common.PointR\rwaypointsList\"\xf8\x03\n" +
	"\fScheduleInfo\x12#\n" +
	"\rflight_number\x18\x01 \x01(\tR\fflightNumber\x12$\n" +
	"\x0eoperated_by_id\x18\x02 \x01(\rR\foperatedById\x12\"\n" +
	"\rpainted_as_id\x18\x03 \x01(\rR\vpaintedAsId\x12\x1b\n" +
	"\torigin_id\x18\x04 \x01(\rR\boriginId\x12%\n" +
	"\x0edestination_id\x18\x05 \x01(\rR\rdestinationId\x12$\n" +
	"\x0ediverted_to_id\x18\x06 \x01(\rR\fdivertedToId\x12/\n" +
	"\x13scheduled_departure\x18\a \x01(\rR\x12scheduledDeparture\x12+\n" +
	"\x11scheduled_arrival\x18\b \x01(\rR\x10scheduledArrival\x12)\n" +
	"\x10actual_departure\x18\t \x01(\rR\x0factualDeparture\x12%\n" +
	"\x0eactual_arrival\x18\n" +
	" \x01(\rR\ractualArrival\x12!\n" +
	"\farr_terminal\x18\v \x01(\tR\varrTerminal\x12\x19\n" +
	"\barr_gate\x18\f \x01(\tR\aarrGate\x12!\n" +
	"\fbaggage_belt\x18\r \x01(\tR\vbaggageBelt\"\xe0\x05\n" +
	"\x12ExtendedFlightInfo\x12\x1a\n" +
	"\bflightid\x18\x01 \x01(\rR\bflightid\x12\x10\n" +
	"\x03lat\x18\x02 \x01(\x02R\x03lat\x12\x10\n" +
	"\x03lon\x18\x03 \x01(\x02R\x03lon\x12\x14\n" +
	"\x05track\x18\x04 \x01(\x05R\x05track\x12\x10\n" +
	"\x03alt\x18\x05 \x01(\x05R\x03alt\x12\x14\n" +
	"\x05speed\x18\x06 \x01(\x05R\x05speed\x12'\n" +
	"\x06status\x18\a \x01(\x0e2\x0f._common.StatusR\x06status\x12!\n" +
	"\ftimestamp_ms\x18\b \x01(\x04R\vtimestampMs\x12\x1b\n" +
	"\ton_ground\x18\t \x01(\bR\bonGround\x12\x1a\n" +
	"\bcallsign\x18\n" +
	" \x01(\tR\bcallsign\x12+\n" +
	"\x06source\x18\v \x01(\x0e2\x13._common.DataSourceR\x06source\x12C\n" +
	"\x10ems_availability\x18\f \x01(\v2\x18._common.EMSAvailabilityR\x0femsAvailability\x12+\n" +
	"\bems_info\x18\r \x01(\v2\x10._common.EMSInfoR\aemsInfo\x12/\n" +
	"\x13squawk_availability\x18\x0e \x01(\bR\x12squawkAvailability\x12\x16\n" +
	"\x06squawk\x18\x0f \x01(\x05R\x06squawk\x12/\n" +
	"\x13vspeed_availability\x18\x10 \x01(\bR\x12vspeedAvailability\x12\x16\n" +
	"\x06vspeed\x18\x11 \x01(\x05R\x06vspeed\x123\n" +
	"\x15airspace_availability\x18\x12 \x01(\bR\x14airspaceAvailability\x12\x1a\n" +
	"\bairspace\x18\x13 \x01(\tR\bairspace\x12\x1f\n" +
	"\vairspace_id\x18\x14 \x01(\tR\n" +
	"airspaceId\x12$\n" +
	"\x0eserver_time_ms\x18\x15 \x01(\x04R\fserverTimeMs\"\xad\x01\n" +
	"\n" +
	"TrailPoint\x12\x1f\n" +
	"\vsnapshot_id\x18\x01 \x01(\x04R\n" +
	"snapshotId\x12\x10\n" +
	"\x03lat\x18\x02 \x01(\x02R\x03lat\x12\x10\n" +
	"\x03lon\x18\x03 \x01(\x02R\x03lon\x12\x1a\n" +
	"\baltitude\x18\x04 \x01(\x05R\baltitude\x12\x10\n" +
	"\x03spd\x18\x05 \x01(\rR\x03spd\x12\x18\n" +
	"\aheading\x18\x06 \x01(\rR\aheading\x12\x12\n" +
	"\x04vspd\x18\a \x01(\x05R\x04vspd\" \n" +
	"\bDuration\x12\x14\n" +
	"\x05count\x18\x01 \x01(\rR\x05count\"\x1c\n" +
	"\x04Tick\x12\x14\n" +
	"\x05count\x18\x01 \x01(\rR\x05count\"\x93\x02\n" +
	"\x12RadarHistoryRecord\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12\x10\n" +
	"\x03lat\x18\x02 \x01(\x02R\x03lat\x12\x10\n" +
	"\x03lon\x18\x03 \x01(\x02R\x03lon\x12\x1a\n" +
	"\baltitude\x18\x04 \x01(\x05R\baltitude\x12\x10\n" +
	"\x03spd\x18\x05 \x01(\rR\x03spd\x12\x18\n" +
	"\aheading\x18\x06 \x01(\rR\aheading\x12\x12\n" +
	"\x04vspd\x18\a \x01(\x05R\x04vspd\x12\x16\n" +
	"\x06squawk\x18\b \x01(\rR\x06squawk\x12+\n" +
	"\x06source\x18\t \x01(\x0e2\x13._common.DataSourceR\x06source\x12\x1a\n" +
	"\bcallsign\x18\n" +
	" \x01(\tR\bcallsign*R\n" +
	"\x15RestrictionVisibility\x12\x0f\n" +
	"\vNOT_VISIBLE\x10\x00\x12\x15\n" +
	"\x11PARTIALLY_VISIBLE\x10\x01\x12\x11\n" +
	"\rFULLY_VISIBLE\x10\x02*\xe6\x01\n" +
	"\aService\x12\r\n" +
	"\tPASSENGER\x10\x00\x12\t\n" +
	"\x05CARGO\x10\x01\x12\x1b\n" +
	"\x17MILITARY_AND_GOVERNMENT\x10\x02\x12\x11\n" +
	"\rBUSINESS_JETS\x10\x03\x12\x14\n" +
	"\x10GENERAL_AVIATION\x10\x04\x12\x0f\n" +
	"\vHELICOPTERS\x10\x05\x12\x14\n" +
	"\x10LIGHTER_THAN_AIR\x10\x06\x12\v\n" +
	"\aGLIDERS\x10\a\x12\n" +
	"\n" +
	"\x06DRONES\x10\b\x12\x13\n" +
	"\x0fGROUND_VEHICLES\x10\t\x12\x11\n" +
	"\rOTHER_SERVICE\x10\n" +
	"\x12\x13\n" +
	"\x0fNON_CATEGORIZED\x10\v*D\n" +
	"\vTrafficType\x12\b\n" +
	"\x04NONE\x10\x00\x12\x0f\n" +
	"\vGROUND_ONLY\x10\x01\x12\x11\n" +
	"\rAIRBORNE_ONLY\x10\x02\x12\a\n" +
	"\x03ALL\x10\x03*\x8d\x01\n" +
	"\n" +
	"DataSource\x12\b\n" +
	"\x04ADSB\x10\x00\x12\b\n" +
	"\x04MLAT\x10\x01\x12\t\n" +
	"\x05FLARM\x10\x02\x12\a\n" +
	"\x03FAA\x10\x03\x12\r\n" +
	"\tESTIMATED\x10\x04\x12\r\n" +
	"\tSATELLITE\x10\x05\x12\x15\n" +
	"\x11OTHER_DATA_SOURCE\x10\x06\x12\a\n" +
	"\x03UAT\x10\a\x12\x10\n" +
	"\fSPIDERTRACKS\x10\b\x12\a\n" +
	"\x03AUS\x10\t*\xbd\x02\n" +
	"\x04Icon\x12\b\n" +
	"\x04B738\x10\x00\x12\b\n" +
	"\x04FGTR\x10\x01\x12\t\n" +
	"\x05ASW20\x10\x02\x12\b\n" +
	"\x04C206\x10\x03\x12\b\n" +
	"\x04C303\x10\x04\x12\b\n" +
	"\x04LJ60\x10\x05\x12\b\n" +
	"\x04Q300\x10\x06\x12\b\n" +
	"\x04B736\x10\a\x12\r\n" +
	"\tFOKKER100\x10\b\x12\b\n" +
	"\x04RJ85\x10\t\x12\b\n" +
	"\x04A320\x10\n" +
	"\x12\b\n" +
	"\x04B757\x10\v\x12\b\n" +
	"\x04B767\x10\f\x12\b\n" +
	"\x04A3ST\x10\r\x12\b\n" +
	"\x04MD11\x10\x0e\x12\b\n" +
	"\x04A330\x10\x0f\x12\b\n" +
	"\x04A343\x10\x10\x12\b\n" +
	"\x04A346\x10\x11\x12\b\n" +
	"\x04B777\x10\x12\x12\b\n" +
	"\x04B747\x10\x13\x12\b\n" +
	"\x04A380\x10\x14\x12\b\n" +
	"\x04A225\x10\x15\x12\a\n" +
	"\x03SI2\x10\x16\x12\x06\n" +
	"\x02EC\x10\x17\x12\b\n" +
	"\x04BALL\x10\x18\x12\b\n" +
	"\x04GRND\x10\x19\x12\b\n" +
	"\x04SLEI\x10\x1a\x12\b\n" +
	"\x04DRON\x10\x1b\x12\a\n" +
	"\x03SAT\x10\x1c\x12\a\n" +
	"\x03ISS\x10\x1d\x12\b\n" +
	"\x04CONC\x10\x1e*P\n" +
	"\x06Status\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\x0e\n" +
	"\n" +
	"BACKGROUND\x10\x01\x12\r\n" +
	"\tEMERGENCY\x10\x02\x12\x11\n" +
	"\rNOT_AVAILABLE\x10\x03\x12\b\n" +
	"\x04LIVE\x10\x04*e\n" +
	"\vFlightStage\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tON_GROUND\x10\x01\x12\r\n" +
	"\tASCENDING\x10\x02\x12\f\n" +
	"\bAIRBORNE\x10\x03\x12\x0e\n" +
	"\n" +
	"DESCENDING\x10\x04\x12\r\n" +
	"\tDIVERSION\x10\x05*7\n" +
	"\vDelayStatus\x12\b\n" +
	"\x04GRAY\x10\x00\x12\t\n" +
	"\x05GREEN\x10\x01\x12\n" +
	"\n" +
	"\x06YELLOW\x10\x02\x12\a\n" +
	"\x03RED\x10\x03*\xc2\x01\n" +
	"\x0fEmergencyStatus\x12\x10\n" +
	"\fNO_EMERGENCY\x10\x00\x12\x15\n" +
	"\x11GENERAL_EMERGENCY\x10\x01\x12\x1f\n" +
	"\x1bLIFEGUARD_MEDICAL_EMERGENCY\x10\x02\x12\x10\n" +
	"\fMINIMUM_FUEL\x10\x03\x12\x15\n" +
	"\x11NO_COMMUNICATIONS\x10\x04\x12\x19\n" +
	"\x15UNLAWFUL_INTERFERENCE\x10\x05\x12\x13\n" +
	"\x0fDOWNED_AIRCRAFT\x10\x06\x12\f\n" +
	"\bRESERVED\x10\aB0Z.github.com/igolaizola/flightradar24/fr24/protob\x06proto3"

var (
	file_fr24_proto__common_proto_rawDescOnce sync.Once
	file_fr24_proto__common_proto_rawDescData []byte
)

func file_fr24_proto__common_proto_rawDescGZIP() []byte {
	file_fr24_proto__common_proto_rawDescOnce.Do(func() {
		file_fr24_proto__common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fr24_proto__common_proto_rawDesc), len(file_fr24_proto__common_proto_rawDesc)))
	})
	return file_fr24_proto__common_proto_rawDescData
}

var file_fr24_proto__common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_fr24_proto__common_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_fr24_proto__common_proto_goTypes = []any{
	(RestrictionVisibility)(0), // 0: _common.RestrictionVisibility
	(Service)(0),               // 1: _common.Service
	(TrafficType)(0),           // 2: _common.TrafficType
	(DataSource)(0),            // 3: _common.DataSource
	(Icon)(0),                  // 4: _common.Icon
	(Status)(0),                // 5: _common.Status
	(FlightStage)(0),           // 6: _common.FlightStage
	(DelayStatus)(0),           // 7: _common.DelayStatus
	(EmergencyStatus)(0),       // 8: _common.EmergencyStatus
	(*EMSInfo)(nil),            // 9: _common.EMSInfo
	(*EMSAvailability)(nil),    // 10: _common.EMSAvailability
	(*Schedule)(nil),           // 11: _common.Schedule
	(*Route)(nil),              // 12: _common.Route
	(*ExtraFlightInfo)(nil),    // 13: _common.ExtraFlightInfo
	(*SourceStats)(nil),        // 14: _common.SourceStats
	(*Stats)(nil),              // 15: _common.Stats
	(*RecentPosition)(nil),     // 16: _common.RecentPosition
	(*PositionBuffer)(nil),     // 17: _common.PositionBuffer
	(*Flight)(nil),             // 18: _common.Flight
	(*FlightProgress)(nil),     // 19: _common.FlightProgress
	(*ImageInfo)(nil),          // 20: _common.ImageInfo
	(*AircraftInfo)(nil),       // 21: _common.AircraftInfo
	(*Point)(nil),              // 22: _common.Point
	(*Coordinate)(nil),         // 23: _common.Coordinate
	(*Fix)(nil),                // 24: _common.Fix
	(*AltArrival)(nil),         // 25: _common.AltArrival
	(*FlightPlan)(nil),         // 26: _common.FlightPlan
	(*ScheduleInfo)(nil),       // 27: _common.ScheduleInfo
	(*ExtendedFlightInfo)(nil), // 28: _common.ExtendedFlightInfo
	(*TrailPoint)(nil),         // 29: _common.TrailPoint
	(*Duration)(nil),           // 30: _common.Duration
	(*Tick)(nil),               // 31: _common.Tick
	(*RadarHistoryRecord)(nil), // 32: _common.RadarHistoryRecord
}
var file_fr24_proto__common_proto_depIdxs = []int32{
	12, // 0: _common.ExtraFlightInfo.route:type_name -> _common.Route
	11, // 1: _common.ExtraFlightInfo.schedule:type_name -> _common.Schedule
	9,  // 2: _common.ExtraFlightInfo.ems_info:type_name -> _common.EMSInfo
	10, // 3: _common.ExtraFlightInfo.ems_availability:type_name -> _common.EMSAvailability
	3,  // 4: _common.SourceStats.source:type_name -> _common.DataSource
	14, // 5: _common.Stats.total_list:type_name -> _common.SourceStats
	16, // 6: _common.PositionBuffer.recent_positions_list:type_name -> _common.RecentPosition
	4,  // 7: _common.Flight.icon:type_name -> _common.Icon
	5,  // 8: _common.Flight.status:type_name -> _common.Status
	3,  // 9: _common.Flight.source:type_name -> _common.DataSource
	13, // 10: _common.Flight.extra_info:type_name -> _common.ExtraFlightInfo
	17, // 11: _common.Flight.position_buffer:type_name -> _common.PositionBuffer
	6,  // 12: _common.FlightProgress.flight_stage:type_name -> _common.FlightStage
	7,  // 13: _common.FlightProgress.delay_status:type_name -> _common.DelayStatus
	4,  // 14: _common.AircraftInfo.icon:type_name -> _common.Icon
	1,  // 15: _common.AircraftInfo.service:type_name -> _common.Service
	20, // 16: _common.AircraftInfo.images_list:type_name -> _common.ImageInfo
	22, // 17: _common.Coordinate.point:type_name -> _common.Point
	23, // 18: _common.Fix.coordinate:type_name -> _common.Coordinate
	24, // 19: _common.AltArrival.arrival:type_name -> _common.Fix
	25, // 20: _common.FlightPlan.alt_arrival_1:type_name -> _common.AltArrival
	25, // 21: _common.FlightPlan.alt_arrival_2:type_name -> _common.AltArrival
	22, // 22: _common.FlightPlan.waypoints_list:type_name -> _common.Point
	5,  // 23: _common.ExtendedFlightInfo.status:type_name -> _common.Status
	3,  // 24: _common.ExtendedFlightInfo.source:type_name -> _common.DataSource
	10, // 25: _common.ExtendedFlightInfo.ems_availability:type_name -> _common.EMSAvailability
	9,  // 26: _common.ExtendedFlightInfo.ems_info:type_name -> _common.EMSInfo
	3,  // 27: _common.RadarHistoryRecord.source:type_name -> _common.DataSource
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_fr24_proto__common_proto_init() }
func file_fr24_proto__common_proto_init() {
	if File_fr24_proto__common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fr24_proto__common_proto_rawDesc), len(file_fr24_proto__common_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fr24_proto__common_proto_goTypes,
		DependencyIndexes: file_fr24_proto__common_proto_depIdxs,
		EnumInfos:         file_fr24_proto__common_proto_enumTypes,
		MessageInfos:      file_fr24_proto__common_proto_msgTypes,
	}.Build()
	File_fr24_proto__common_proto = out.File
	file_fr24_proto__common_proto_goTypes = nil
	file_fr24_proto__common_proto_depIdxs = nil
}
